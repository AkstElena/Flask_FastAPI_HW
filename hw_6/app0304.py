"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á.
üìå –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–æ–ø–∏—Å–∞–Ω–∏–µ" –∏ "—Å—Ç–∞—Ç—É—Å" (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞).
üìå API –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏.
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
üìå –ù–∞–ø–∏—à–∏—Ç–µ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª—å Task —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
‚óã id: int (–ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á)
‚óã title: str (–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)
‚óã description: str (–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)
‚óã done: bool (—Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏)
"""
from typing import List
import databases
import sqlalchemy
from fastapi import FastAPI
from pydantic import BaseModel, Field

DATABASE_URL = "sqlite:///database_hw0304.db"
database = databases.Database(DATABASE_URL)
metadata = sqlalchemy.MetaData()

tasks = sqlalchemy.Table(
    "tasks",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("title", sqlalchemy.String(50)),
    sqlalchemy.Column("description", sqlalchemy.String(200)),
    sqlalchemy.Column("done", sqlalchemy.Boolean()),
)

engine = sqlalchemy.create_engine(DATABASE_URL,
                                  connect_args={"check_same_thread": False})  # –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è sqlite
metadata.create_all(engine)  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î

app = FastAPI()


class TaskIn(BaseModel):
    title: str = Field(..., max_length=50)
    description: str = Field(..., max_length=200)
    done: bool = Field(default=False)


class Task(TaskIn):
    id: int


@app.get("/tasks/", response_model=List[Task])
async def read_tasks():
    query = tasks.select()
    return await database.fetch_all(query)


@app.get("/tasks/{task_id}", response_model=Task)  # –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ id
async def read_task(task_id: int):
    query = tasks.select().where(tasks.c.id == task_id)
    return await database.fetch_one(query)


@app.post("/tasks/", response_model=Task)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def create_task(task: TaskIn):  # –º–æ–¥–µ–ª—å –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    query = tasks.insert().values(**task.model_dump())
    last_record_id = await database.execute(query)
    return {**task.dict(), "id": last_record_id}


@app.put("/tasks/{task_id}", response_model=Task)  # –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
async def update_task(task_id: int, new_task: TaskIn):
    query = tasks.update().where(tasks.c.id == task_id).values(**new_task.model_dump())
    await database.execute(query)
    return {**new_task.model_dump(), "id": task_id}


@app.delete("/tasks/{task_id}")  # —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
async def delete_task(task_id: int):
    query = tasks.delete().where(tasks.c.id == task_id)
    await database.execute(query)
    return {'message': 'task deleted'}
